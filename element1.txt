

stages:
  - build
  - test
  - deploy




test_job:
  stage: test
  script:
    - echo "No tests defined for this project."  # Placeholder for actual testing commands

before_script:
   - apt-get update && apt-get install -y awscli
   - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
   - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
   - aws configure set region $AWS_DEFAULT_REGION 

deploy_job:
  stage: deploy
  script:
    - apt-get update -qy
    - apt-get install -y openssh-client  # Install SSH client
    - mkdir -p ~/.ssh  # Create the SSH directory
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa  # Add SSH key
     # Set permissions for the SSH key
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts 
     # Add GitLab host to known_hosts file
    # - ssh-keyscan -H 3.84.209.181 >> ~/.ssh/known_hosts 
    - chmod 600 ~/.ssh/id_rsa 
    - git remote set-url origin https://gitlab.com/first-project4165533/trial-project2.git
    - ssh ubuntu@$EC2_IPADDRESS
    - cd /var/www/html/trial-project2
    - git pull origin main  # Replace 'main' with your branch name

    - echo "Hello"

      
  only:
    - main

# stages:
#   - deploy

# variables:
#   GIT_SUBMODULE_STRATEGY: recursive
#   GIT_SUBMODULE_FORCE_HTTPS: "true"
#   AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID  # Your AWS Access Key ID (should be stored as a CI/CD variable)
#   AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY  # Your AWS Secret Access Key (should be stored as a CI/CD variable)
#   # AWS_DEFAULT_REGION: us-east-1  # Set your AWS region

# deploy:
#   stage: deploy
#   script:
#     - apt-get update -qy
#     - apt-get install -y awscli  # Install AWS CLI
#     - mkdir -p ~/.aws
#     - echo "[default]" > ~/.aws/config
#     - echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/config
#     - echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
#     - chmod 600 ~/.aws/config  # Secure the AWS configuration file
#     - ssh-keyscan -H $EC2_IPADDRESS >> ~/.ssh/known_hosts  # Add EC2 host to known_hosts
#     # - scp -r -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./git@gitlab.com:first-project4165533/trial-project2.git ubuntu@$EC2_IPADDRESS:/var/www/html  # Copy your code to the EC2 instance
#     - echo "HOST *" > ~/.ssh/config
#     - echo "StrictHostKeyChecking no" >> ~/.ssh/config
#     - chmod 644 ~/.ssh/known_hosts
#     # - curl --header "PRIVATE-TOKEN: glpat-K826F5-K4GJkEgfvCynh" https://gitlab.com/api/v4/users?username=aarushit
    
#     - git remote set-url origin https://aarushit:glpat-K826F5-K4GJkEgfvCynh@gitlab.com/first-project4165533/trial-project2.git
#     - git remote remove origin
#     - git remote add origin git@gitlab.com:aarushit/first-project4165533/trial-project2.git
    
#     # - origin  git@gitlab.com:aarushit/first-project4165533/trial-project2.git (fetch)
#     # - origin  git@gitlab.com:aarushit/first-project4165533/trial-project2.git (push)

#     # - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IPADDRESS "cd /var/www/html/trial-project2 && git pull origin main"
#     - ssh ubuntu@$EC2_IPADDRESS "cd /var/www/html/trial-project2 && git pull origin main"

#     # - Username for 'https://gitlab.com' = 'aarushit'
#     # - echo "StrictHostKeyChecking no" >> ~/.ssh/config
   
#     - echo "Hello"
#    # Additional deployment steps, e.g., database migrations, restarting services, etc.
#   only:
#     - main  # Trigger this job only on the 'master' branch or as needed


    



